on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod
  push:
    branches:
      - master

env:
  TF_VERSION: '1.7.1'
  AWS_REGION: 'us-east-2'

jobs:
  build-lambda-layers:
    name: Build Lambda Layers
    runs-on: ubuntu-latest
    permissions:
      id-token: write # Required for OIDC authentication
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLETOASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Upgrade Pip
        run: python -m pip install --upgrade pip
        
      - name: Create Lambda Layer Dependencies
        run: python create_lambda_layer.py --requirements

      - name: Run Auto-Zip For Lambda Functions
        run: python auto_zip_lambdas.py

      - name: List Created Files (Debug)
        run: |
          echo "Files in terraform/lambda_packages:"
          ls -la terraform/lambda_packages/ || echo "Directory not found"
          echo "Files in root directory:"
          ls -la *.zip || echo "No zip files in root"
                  
      - name: Upload Lambda Packages
        uses: actions/upload-artifact@v4
        with:
          name: lambda-packages
          path: |
            terraform/lambda_packages/*.zip

  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    needs: build-lambda-layers
    permissions:
      id-token: write # for OIDC
      contents: read # for actions/checkout
    defaults:
      run:
        working-directory: terraform
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download Lambda Layers
        uses: actions/download-artifact@v4
        with:
          name: lambda-packages
          path: terraform/lambda_packages
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLETOASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        id: init
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TF_S3BUCKETNAME }}" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ secrets.TF_DYNAMODBTABLENAME }}"

      - name: Debug Log
        run: |
          ls -la
          cd lambda_packages
          ls -la

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan \
            -out=tfplan \
            -var="environment=${{ github.event.inputs.environment || 'dev' }}" \
            -var="minimax_key=${{ secrets.MINIMAX_API_KEY }}" \
            -var="fal_key=${{ secrets.FAL_API_KEY }}" \
            -var="youtube_client_id=${{ secrets.YOUTUBE_CLIENT_ID }}" \
            -var="youtube_client_secret=${{ secrets.YOUTUBE_CLIENT_SECRET }}" \
            -var="youtube_refresh_token=${{ secrets.YOUTUBE_REFRESH_TOKEN }}"
        env:
          ENVIRONMENT: ${{ github.event.inputs.environment || 'dev' }}
          
      - name: Terraform Apply
        if: github.ref == 'refs/heads/master'
        run: terraform apply -auto-approve tfplan